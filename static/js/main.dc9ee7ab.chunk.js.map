{"version":3,"sources":["components/styles/Controls.module.css","components/styles/Card.module.css","components/styles/Status.module.css","components/styles/Hand.module.css","components/Status.tsx","components/Controls.tsx","components/Card.tsx","components/Hand.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Status","message","balance","className","styles","statusContainer","status","value","Controls","gameState","buttonState","betEvent","hitEvent","standEvent","resetEvent","useState","amount","setAmount","input","inputStyle","setInputStyle","useEffect","validation","inputError","amountChange","e","target","controlsContainer","betContainer","autoFocus","type","onChange","onClick","Math","round","button","disabled","hitDisabled","standDisabled","resetDisabled","Card","suit","hidden","hiddenCard","card","black","red","Hand","title","cards","handContainer","length","getTitle","cardContainer","map","index","key","App","GameState","Deal","Message","data","JSON","parse","stringify","jsonData","deck","setDeck","userCards","setUserCards","userScore","setUserScore","userCount","setUserCount","dealerCards","setDealerCards","dealerScore","setDealerScore","dealerCount","setDealerCount","setBalance","bet","setBet","setGameState","setMessage","setButtonState","init","drawCard","user","dealer","userTurn","hitStand","calculate","bust","dealerTurn","checkWin","dealType","randomIndex","floor","random","splice","console","log","dealCard","alert","push","setScore","total","forEach","Number","aces","filter","userWin","dealerWin","tie","clear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc9ee7ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"Controls_controlsContainer__3MsQX\",\"betContainer\":\"Controls_betContainer__cmyBD\",\"input\":\"Controls_input__2mre4\",\"inputError\":\"Controls_inputError__1_16v\",\"button\":\"Controls_button__bQuvA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1ug_o\",\"hiddenCard\":\"Card_hiddenCard__3efrF\",\"black\":\"Card_black__2i2gQ\",\"red\":\"Card_red__3u73Q\",\"value\":\"Card_value__xC5UF\",\"suit\":\"Card_suit__3PW5B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"Status_statusContainer__8NXie\",\"status\":\"Status_status__BSSmQ\",\"balance\":\"Status_balance__1L1ZD\",\"value\":\"Status_value__2gtwT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"handContainer\":\"Hand_handContainer__29WP3\",\"cardContainer\":\"Hand_cardContainer__3eB2U\",\"title\":\"Hand_title__2aov-\"};","import React from 'react';\r\nimport styles from './styles/Status.module.css';\r\n\r\ntype StatusProps = {\r\n  message: string,\r\n  balance: number\r\n};\r\n\r\nconst Status: React.FC<StatusProps> = ({ message, balance }) => {\r\n  return (\r\n    <div className={styles.statusContainer}>\r\n      <div className={styles.status}>\r\n        <h1 className={styles.value}>{message}</h1>\r\n      </div>\r\n      <div className={styles.balance}>\r\n        <h1 className={styles.value}>${balance}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Status;","import React, { useState, useEffect } from 'react';\r\nimport styles from './styles/Controls.module.css';\r\n\r\ntype ControlsProps = {\r\n  balance: number,\r\n  gameState: number,\r\n  buttonState: any,\r\n  betEvent: any,\r\n  hitEvent: any,\r\n  standEvent: any,\r\n  resetEvent: any\r\n};\r\n\r\nconst Controls: React.FC<ControlsProps> = ({ balance, gameState, buttonState, betEvent, hitEvent, standEvent, resetEvent }) => {\r\n  const [amount, setAmount] = useState(10);\r\n  const [inputStyle, setInputStyle] = useState(styles.input);\r\n\r\n  useEffect(() => {\r\n    validation();\r\n  }, [amount, balance]);\r\n\r\n  const validation = () => {\r\n    if (amount > balance) {\r\n      setInputStyle(styles.inputError);\r\n      return false;\r\n    }\r\n    if (amount < 0.01) {\r\n      setInputStyle(styles.inputError);\r\n      return false;\r\n    }\r\n    setInputStyle(styles.input);\r\n    return true;\r\n  }\r\n\r\n  const amountChange = (e: any) => {\r\n    setAmount(e.target.value);\r\n  }\r\n\r\n  const onBetClick = () => {\r\n    if (validation()) {\r\n      betEvent(Math.round(amount * 100) / 100);\r\n    }\r\n  }\r\n\r\n  const getControls = () => {\r\n    if (gameState === 0) {\r\n      return (\r\n        <div className={styles.controlsContainer}>\r\n          <div className={styles.betContainer}>\r\n            <h4>Amount:</h4>\r\n            <input autoFocus type='number' value={amount} onChange={amountChange} className={inputStyle} />\r\n          </div>\r\n          <button onClick={() => onBetClick()} className={styles.button}>Bet</button>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div className={styles.controlsContainer}>\r\n          <button onClick={() => hitEvent()} disabled={buttonState.hitDisabled} className={styles.button}>Hit</button>\r\n          <button onClick={() => standEvent()} disabled={buttonState.standDisabled} className={styles.button}>Stand</button>\r\n          <button onClick={() => resetEvent()} disabled={buttonState.resetDisabled} className={styles.button}>Reset</button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {getControls()}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Controls;","import React from 'react';\r\nimport styles from './styles/Card.module.css';\r\n\r\ntype CardProps = {\r\n  value: string;\r\n  suit: string;\r\n  hidden: boolean;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = ({ value, suit, hidden }) => {\r\n  const getColor = () => {\r\n    if (suit === '♠' || suit === '♣') {\r\n      return styles.black;\r\n    }\r\n    else {\r\n      return styles.red;\r\n    }\r\n  }\r\n\r\n  const getCard = () => {\r\n    if (hidden) {\r\n      return (\r\n        <div className={styles.hiddenCard} />\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div className={styles.card}>\r\n          <div className={getColor()}>\r\n            <h1 className={styles.value}>{value}</h1>\r\n            <h1 className={styles.suit}>{suit}</h1>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {getCard()}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport styles from './styles/Hand.module.css';\r\nimport Card from './Card';\r\n\r\ntype HandProps = {\r\n  title: string,\r\n  cards: any[]\r\n};\r\n\r\nconst Hand: React.FC<HandProps> = ({ title, cards }) => {\r\n  const getTitle = () => {\r\n    if (cards.length > 0) {\r\n      return (\r\n        <h1 className={styles.title}>{title}</h1>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div className={styles.handContainer}>\r\n      {getTitle()}\r\n      <div className={styles.cardContainer}>\r\n        {cards.map((card: any, index: number) => {\r\n          return (\r\n            <Card key={index} value={card.value} suit={card.suit} hidden={card.hidden} />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Hand;","import React, { useState, useEffect } from 'react';\r\nimport Status from './Status';\r\nimport Controls from './Controls';\r\nimport Hand from './Hand';\r\nimport jsonData from '../deck.json';\r\n\r\nconst App: React.FC = () => {\r\n  enum GameState {\r\n    bet,\r\n    init,\r\n    userTurn,\r\n    dealerTurn\r\n  }\r\n\r\n  enum Deal {\r\n    user,\r\n    dealer,\r\n    hidden\r\n  }\r\n\r\n  enum Message {\r\n    bet = 'Place a Bet!',\r\n    hitStand = 'Hit or Stand?',\r\n    bust = 'Bust!',\r\n    userWin = 'You Win!',\r\n    dealerWin = 'Dealer Wins!',\r\n    tie = 'Tie!'\r\n  }\r\n\r\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\r\n  const [deck, setDeck]: any[] = useState(data);\r\n\r\n  const [userCards, setUserCards]: any[] = useState([]);\r\n  const [userScore, setUserScore] = useState(0);\r\n  const [userCount, setUserCount] = useState(0);\r\n\r\n  const [dealerCards, setDealerCards]: any[] = useState([]);\r\n  const [dealerScore, setDealerScore] = useState(0);\r\n  const [dealerCount, setDealerCount] = useState(0);\r\n\r\n  const [balance, setBalance] = useState(100);\r\n  const [bet, setBet] = useState(0);\r\n\r\n  const [gameState, setGameState] = useState(GameState.bet);\r\n  const [message, setMessage] = useState(Message.bet);\r\n  const [buttonState, setButtonState] = useState({\r\n    hitDisabled: false,\r\n    standDisabled: false,\r\n    resetDisabled: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (gameState === GameState.init) {\r\n      drawCard(Deal.user);\r\n      drawCard(Deal.hidden);\r\n      drawCard(Deal.user);\r\n      drawCard(Deal.dealer);\r\n      setGameState(GameState.userTurn);\r\n      setMessage(Message.hitStand);\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    calculate(userCards, setUserScore);\r\n    setUserCount(userCount + 1);\r\n  }, [userCards]);\r\n\r\n  useEffect(() => {\r\n    calculate(dealerCards, setDealerScore);\r\n    setDealerCount(dealerCount + 1);\r\n  }, [dealerCards]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === GameState.userTurn) {\r\n      if (userScore === 21) {\r\n        buttonState.hitDisabled = true;\r\n        setButtonState({ ...buttonState });\r\n      }\r\n      else if (userScore > 21) {\r\n        bust();\r\n      }\r\n    }\r\n  }, [userCount]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === GameState.dealerTurn) {\r\n      if (dealerScore >= 17) {\r\n        checkWin();\r\n      }\r\n      else {\r\n        drawCard(Deal.dealer);\r\n      }\r\n    }\r\n  }, [dealerCount]);\r\n\r\n  const resetGame = () => {\r\n    console.clear();\r\n    setDeck(data);\r\n\r\n    setUserCards([]);\r\n    setUserScore(0);\r\n    setUserCount(0);\r\n\r\n    setDealerCards([]);\r\n    setDealerScore(0);\r\n    setDealerCount(0);\r\n\r\n    setBet(0);\r\n\r\n    setGameState(GameState.bet);\r\n    setMessage(Message.bet);\r\n    setButtonState({\r\n      hitDisabled: false,\r\n      standDisabled: false,\r\n      resetDisabled: true\r\n    });\r\n  }\r\n\r\n  const placeBet = (amount: number) => {\r\n    setBet(amount);\r\n    setBalance(Math.round((balance - amount) * 100) / 100);\r\n    setGameState(GameState.init);\r\n  }\r\n\r\n  const drawCard = (dealType: Deal) => {\r\n    if (deck.length > 0) {\r\n      const randomIndex = Math.floor(Math.random() * deck.length);\r\n      const card = deck[randomIndex];\r\n      deck.splice(randomIndex, 1);\r\n      setDeck([...deck]);\r\n      console.log('Remaining Cards:', deck.length);\r\n      switch (card.suit) {\r\n        case 'spades':\r\n          dealCard(dealType, card.value, '♠');\r\n          break;\r\n        case 'diamonds':\r\n          dealCard(dealType, card.value, '♦');\r\n          break;\r\n        case 'clubs':\r\n          dealCard(dealType, card.value, '♣');\r\n          break;\r\n        case 'hearts':\r\n          dealCard(dealType, card.value, '♥');\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      alert('All cards have been drawn');\r\n    }\r\n  }\r\n\r\n  const dealCard = (dealType: Deal, value: string, suit: string) => {\r\n    switch (dealType) {\r\n      case Deal.user:\r\n        userCards.push({ 'value': value, 'suit': suit, 'hidden': false });\r\n        setUserCards([...userCards]);\r\n        break;\r\n      case Deal.dealer:\r\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': false });\r\n        setDealerCards([...dealerCards]);\r\n        break;\r\n      case Deal.hidden:\r\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': true });\r\n        setDealerCards([...dealerCards]);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const revealCard = () => {\r\n    dealerCards.filter((card: any) => {\r\n      if (card.hidden === true) {\r\n        card.hidden = false;\r\n      }\r\n      return card;\r\n    });\r\n    setDealerCards([...dealerCards])\r\n  }\r\n\r\n  const calculate = (cards: any[], setScore: any) => {\r\n    let total = 0;\r\n    cards.forEach((card: any) => {\r\n      if (card.hidden === false && card.value !== 'A') {\r\n        switch (card.value) {\r\n          case 'K':\r\n            total += 10;\r\n            break;\r\n          case 'Q':\r\n            total += 10;\r\n            break;\r\n          case 'J':\r\n            total += 10;\r\n            break;\r\n          default:\r\n            total += Number(card.value);\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    const aces = cards.filter((card: any) => {\r\n      return card.value === 'A';\r\n    });\r\n    aces.forEach((card: any) => {\r\n      if (card.hidden === false) {\r\n        if ((total + 11) > 21) {\r\n          total += 1;\r\n        }\r\n        else if ((total + 11) === 21) {\r\n          if (aces.length > 1) {\r\n            total += 1;\r\n          }\r\n          else {\r\n            total += 11;\r\n          }\r\n        }\r\n        else {\r\n          total += 11;\r\n        }\r\n      }\r\n    });\r\n    setScore(total);\r\n  }\r\n\r\n  const hit = () => {\r\n    drawCard(Deal.user);\r\n  }\r\n\r\n  const stand = () => {\r\n    buttonState.hitDisabled = true;\r\n    buttonState.standDisabled = true;\r\n    buttonState.resetDisabled = false;\r\n    setButtonState({ ...buttonState });\r\n    setGameState(GameState.dealerTurn);\r\n    revealCard();\r\n  }\r\n\r\n  const bust = () => {\r\n    buttonState.hitDisabled = true;\r\n    buttonState.standDisabled = true;\r\n    buttonState.resetDisabled = false;\r\n    setButtonState({ ...buttonState });\r\n    setMessage(Message.bust);\r\n  }\r\n\r\n  const checkWin = () => {\r\n    if (userScore > dealerScore || dealerScore > 21) {\r\n      setBalance(Math.round((balance + (bet * 2)) * 100) / 100);\r\n      setMessage(Message.userWin);\r\n    }\r\n    else if (dealerScore > userScore) {\r\n      setMessage(Message.dealerWin);\r\n    }\r\n    else {\r\n      setBalance(Math.round((balance + (bet * 1)) * 100) / 100);\r\n      setMessage(Message.tie);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Status message={message} balance={balance} />\r\n      <Controls\r\n        balance={balance}\r\n        gameState={gameState}\r\n        buttonState={buttonState}\r\n        betEvent={placeBet}\r\n        hitEvent={hit}\r\n        standEvent={stand}\r\n        resetEvent={resetGame}\r\n      />\r\n      <Hand title={`Dealer's Hand (${dealerScore})`} cards={dealerCards} />\r\n      <Hand title={`Your Hand (${userScore})`} cards={userCards} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}